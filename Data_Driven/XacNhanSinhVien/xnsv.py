# Generated by Selenium IDE
import openpyxl
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

from selenium.common.exceptions import NoSuchElementException

class FileExcelReader:
    file = ""
    sheetName = ""

    def __init__(self, file, sheetName):
        self.file = file
        self.sheetName = sheetName

    def getRowCount(self):
        wordbook = openpyxl.load_workbook(self.file)
        sheet = wordbook[self.sheetName]
        return (sheet.max_row)

    def getColumnCount(self):
        wordbook = openpyxl.load_workbook(self.file)
        sheet = wordbook[self.sheetName]
        return (sheet.max_column)

    def readData(self, rownum, colnum):
        wordbook = openpyxl.load_workbook(self.file)
        sheet = wordbook[self.sheetName]
        return sheet.cell(row=rownum, column=colnum).value

    def writeData(self, data, rownum, colnum):
        wordbook = openpyxl.load_workbook(self.file)
        sheet = wordbook[self.sheetName]
        sheet.cell(row=rownum, column=colnum).value = data
        wordbook.save(self.file)

class TestRegisXNSV():
  def setup_method(self, testURL):
    self.driver = webdriver.Chrome()
    self.driver.maximize_window()
    self.vars = {}
    # Logout if necessary
    self.driver.get("https://mybk.hcmut.edu.vn/my/logoutSSO.action")

    self.driver.get(testURL)
    username = self.driver.find_element(By.NAME,"username")
    password = self.driver.find_element(By.NAME,"password")  
    submitBtn = self.driver.find_element(By.NAME,"submit")  

    username.send_keys("tu.phuong1014442772")
    password.send_keys("newpassword")
    submitBtn.click()
  
  def teardown_method(self):
    self.driver.quit()

  def selectReason(self, reason):
    reasonSelection = self.driver.find_element(By.XPATH,'//*[@id="select2-cboLoaiDangKy-container"]')
    reasonSelection.click()
    reasonSelect = self.driver.find_element(By.XPATH, reason)
    reasonSelect.click()
  
  def selectReceive(self, receive): 
    receiveSelection = self.driver.find_element(By.XPATH, '//*[@id="select2-cboNoiNhan-container"]')
    receiveSelection.click()
    receiveSelect = self.driver.find_element(By.XPATH, receive)
    receiveSelect.click()

  def fillInputBox(self, inputBox):
      inputBoxList = inputBox.split(',')
      for box in inputBoxList:
          element = self.driver.find_element(By.XPATH, box)
          element.send_keys("1")

  def test_regisXNSV(self, type, reason, receive, target, copies, inputbox, expectedResult):
    if(type == 1):
        self.selectReason(reason)
        self.selectReceive(receive)
        
        if(target):
            targetInput = self.driver.find_element(By.XPATH, '//*[@id="txtMucDichXacNhanDRL"]')
            targetInput.send_keys(target)
    elif(type == 2):
        self.selectReason(reason)
        self.selectReceive(receive)

        copiesInput = self.driver.find_element(By.XPATH, '//*[@id="txtSoLuongBanIn"]')
        copiesInput.clear()
        copiesInput.send_keys(copies)
    elif(type == 3):
        self.selectReason(reason)
        self.selectReceive(receive)
        if(inputBox is not None):
            self.fillInputBox(inputbox)

    elif(type == 4):
        self.selectReason(reason)
        self.selectReceive(receive)
        if(inputBox is not None):
            self.fillInputBox(inputbox)
    else: 
        if(reason):
            self.selectReason(reason)
        if(receive):
            self.selectReceive(receive)

    submitBtn = self.driver.find_element(By.XPATH, '//*[@id="btnDangKy"]');
    submitBtn.click();
    
    if expectedResult == "Failed":
        eleWarning = self.driver.find_element(By.XPATH, '/html/body/div[4]/div/div[1]/div[1]')
        display_property = eleWarning.value_of_css_property('display')
        time.sleep(2)
        shutdownButton = self.driver.find_element(By.XPATH, '/html/body/div[4]/div/div[3]/button[1]')
        shutdownButton.click()

        if(display_property == "none"): 
            return "Failed"
        else:
            return "Passed"
    if expectedResult == "Success":
        time.sleep(5)
        if(self.driver.find_element(By.XPATH, '//*[@id="lstPhieuDangChoXuLy"]/tbody/tr/td[1]/i')):
            cancelRegis = self.driver.find_element(By.XPATH, '//*[@id="lstPhieuDangChoXuLy"]/tbody/tr/td[1]/i');
            cancelRegis.click();
            confirmCancelRegis = self.driver.find_element(By.XPATH, '/html/body/div[4]/div/div[3]/button[1]')
            confirmCancelRegis.click();
            return "Passed"
        else:
            return "Failed"
    return "Failed";

if __name__ == "__main__":
    excel = FileExcelReader('SecB_xnsv_data.xlsx', 'Sheet1')

    test = TestRegisXNSV()
    nRows = excel.getRowCount()
    testURL = excel.readData(1, 2);
    test.setup_method(testURL);
    time.sleep(2)
    for row in range(4, nRows + 1):
        type = excel.readData(row,2)
        reason = excel.readData(row,3)
        receive = excel.readData(row,4)
        target = excel.readData(row, 5)
        copies = excel.readData(row,6)
        inputBox = excel.readData(row,7)
        expectedResult = excel.readData(row,8)

        result = test.test_regisXNSV(type, reason, receive, target, copies, inputBox, expectedResult)
        excel.writeData(result,row,9)
        print(row, result)


    test.teardown_method()